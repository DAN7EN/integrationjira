import { JiraServiceReal } from "./jira-service-real"
import { config } from "./config"
import type { User, JiraIssue } from "@/types" // Importar User

// CAMBIO AQU√ç: Ahora devuelve los datos del usuario o null
export async function testJiraConnection(): Promise<User | null> {
  console.log("üîç Probando conexi√≥n con Jira a trav√©s del proxy...")

  try {
    // Verificar configuraci√≥n localmente
    console.log("üìã Verificando configuraci√≥n local...")
    console.log("- Base URL:", config.jira.baseUrl)
    console.log("- Email:", config.jira.userEmail)
    console.log("- Token configurado:", !!config.jira.apiToken)

    if (!config.jira.isConfigured()) {
      throw new Error("‚ùå Configuraci√≥n de Jira incompleta. Revisa tus variables de entorno.")
    }

    // Realizar llamada a /api/jira/proxy/myself
    console.log("üîó Realizando llamada a /api/jira/proxy/myself...")
    const response = await fetch("/api/jira/proxy/myself")
    const data = await response.json()

    if (response.ok && data.success) {
      console.log("‚úÖ ¬°Conexi√≥n exitosa con Jira a trav√©s del proxy!")
      return data.user as User // Devuelve los datos del usuario
    } else {
      console.log("‚ùå Error de conexi√≥n con Jira a trav√©s del proxy:", data.error || data.message)
      throw new Error(data.error || data.message || "Error desconocido al probar conexi√≥n.")
    }
  } catch (error: any) {
    console.error("‚ùå Error probando conexi√≥n:", error.message)
    return null // Devuelve null en caso de error
  }
}

export async function testJiraIssue(issueKey: string): Promise<JiraIssue> {
  console.log(`üîç Probando obtener issue: ${issueKey}`)

  try {
    const issue = await JiraServiceReal.getIssue(issueKey)
    console.log("‚úÖ Issue obtenido exitosamente:")
    console.log("- Key:", issue.key)
    console.log("- Summary:", issue.summary)
    console.log("- Status:", issue.status)
    console.log("- Assignee:", issue.assignee)

    return issue
  } catch (error: any) {
    console.error("‚ùå Error obteniendo issue:", error.message)
    throw error
  }
}
